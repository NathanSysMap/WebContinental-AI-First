// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  name      String
  image     String?
  tenantId  String
  companyId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company    Company?    @relation(fields: [companyId], references: [id])
  orders     Order[]
  products   Product[]
  aiSettings AiSettings?
}

model Product {
  id          String      @id @default(uuid())
  tenantId    String // Identificação da loja
  name        String
  description String?
  price       Float
  unit        String?
  category    String?
  subcategory String?
  imageUrl    String?
  stock       Int         @default(0)
  active      Boolean     @default(true)
  productType ProductType
  tags        String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId String
  user   User        @relation(fields: [userId], references: [id])
  items  OrderItem[]
}

model Order {
  id       String  @id @default(uuid())
  status   String
  client   String?
  time     String?
  tenantId String // Ligação do pedido com o tenant (loja)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User        @relation(fields: [userId], references: [id])
  items  OrderItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  quantity  Int
  productId String
  orderId   String

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model AiSettings {
  id       String @id @default(uuid())
  persona  String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
  tenantId String // Associado à loja do usuário
}

enum ProductType {
  PRODUTO
  SERVICO
  CURSO
  ASSINATURA
}

model Company {
  id              String  @id @default(uuid())
  corporateName   String
  tradeName       String
  cnpj            String  @unique
  website         String?
  businessSegment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contact CompanyContact?
  address CompanyAddress?
  users   User[]
}

model CompanyContact {
  id                  String  @id @default(uuid())
  phone               String
  email               String
  whatsapp            String?
  legalRepresentative String
  representativeEmail String

  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id])
}

model CompanyAddress {
  id         String  @id @default(uuid())
  zipCode    String
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  country    String

  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id])
}
